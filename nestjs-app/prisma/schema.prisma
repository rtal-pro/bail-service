generator client {
  provider        = "prisma-client-js"
  binaryTargets   = ["native", "debian-openssl-1.1.x"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Enterprise {
  id           String             @id @default(cuid())
  name         String?            @unique
  email        String             @unique
  phone        String             @unique
  admins       Admin[]
  providers    Provider[]
  clusters     BuildingCluster[]
  buildings    Building[]
  spots        Spot[]
  reports      Report[]
  createdBy    Admin?              @relation("EnterpriseCreatedBy", fields: [createdById], references: [id])
  createdById  String?
  updatedBy    Admin?              @relation("EnterpriseUpdatedBy", fields: [updatedById], references: [id])
  updatedById  String?
  createdAt    DateTime           @default(now())
  updatedAt    DateTime           @updatedAt
  deletedAt    DateTime?
}

model Admin {
  id                String             @id @default(cuid())
  email             String             @unique
  phone             String             @unique
  firstName         String
  lastName          String
  password          String
  role              Role               @default(ADMIN)
  enterprise        Enterprise?        @relation(fields: [enterpriseId], references: [id])
  enterpriseId      String?
  deletedAt    DateTime?
  
  // Relations to track who created or updated entities
  enterprisesCreated Enterprise[]      @relation("EnterpriseCreatedBy")
  enterprisesUpdated Enterprise[]      @relation("EnterpriseUpdatedBy")
  providersCreated   Provider[]        @relation("ProviderCreatedBy")
  providersUpdated   Provider[]        @relation("ProviderUpdatedBy")
  taskTemplatesCreated TaskTemplate[]  @relation("TaskTemplateCreatedBy")
  taskTemplatesUpdated TaskTemplate[]  @relation("TaskTemplateUpdatedBy")
  tasksCreated       Task[]            @relation("TaskCreatedBy")
  tasksUpdated       Task[]            @relation("TaskUpdatedBy")
  buildingClustersCreated BuildingCluster[] @relation("BuildingClusterCreatedBy")
  buildingClustersUpdated BuildingCluster[] @relation("BuildingClusterUpdatedBy")
  buildingsCreated   Building[]        @relation("BuildingCreatedBy")
  buildingsUpdated   Building[]        @relation("BuildingUpdatedBy")
  spotsCreated       Spot[]            @relation("SpotCreatedBy")
  spotsUpdated       Spot[]            @relation("SpotUpdatedBy")
  qrCodesCreated     QRCode[]          @relation("QRCodeCreatedBy")
  qrCodesUpdated     QRCode[]          @relation("QRCodeUpdatedBy")
  nfcTagsCreated     NFCTag[]          @relation("NFCTagCreatedBy")
  nfcTagsUpdated     NFCTag[]          @relation("NFCTagUpdatedBy")
  rfidsCreated       RFIDTag[]         @relation("RFIDTagCreatedBy")
  rfidsUpdated       RFIDTag[]         @relation("RFIDTagUpdatedBy")
  beaconsCreated     Beacon[]          @relation("BeaconCreatedBy")
  beaconsUpdated     Beacon[]          @relation("BeaconUpdatedBy")
  geoFencesCreated   GeoFence[]        @relation("GeoFenceCreatedBy")
  geoFencesUpdated   GeoFence[]        @relation("GeoFenceUpdatedBy")
  reportsCreated     Report[]          @relation("ReportCreatedBy")
  reportsUpdated     Report[]          @relation("ReportUpdatedBy")

  createdAt          DateTime           @default(now())
  updatedAt          DateTime           @updatedAt
}

model User {
  id           String             @id @default(cuid())
  email        String             @unique
  phone        String             @unique
  firstName    String
  lastName     String
  password     String
  role         Role               @default(USER)
  Provider     Provider           @relation(fields: [providerId], references: [id])
  providerId   String
  createdAt    DateTime           @default(now())
  updatedAt    DateTime           @updatedAt
  deletedAt    DateTime?
  taskComments TaskComment[]
  taskHistories TaskHistory[]
}

model Provider {
  id           String             @id @default(cuid())
  email        String             @unique
  phone        String             @unique
  firstName    String?
  lastName     String?
  companyName  String?
  logo         String?
  password     String
  role         Role               @default(USER)
  providerType ProviderType       @default(OTHER)
  enterprise   Enterprise         @relation(fields: [enterpriseId], references: [id])
  enterpriseId String
  ProviderStatistics ProviderStatistics[]
  taskTemplate TaskTemplate[]
  tasks        Task[]
  createdBy    Admin?              @relation("ProviderCreatedBy", fields: [createdById], references: [id])
  createdById  String?
  updatedBy    Admin?              @relation("ProviderUpdatedBy", fields: [updatedById], references: [id])
  updatedById  String?
  createdAt    DateTime           @default(now())
  updatedAt    DateTime           @updatedAt
  deletedAt    DateTime?
  User         User[]
}

model TaskTemplate {
  id           String             @id @default(cuid())
  title        String
  description  String?
  status       TaskTemplateStatus @default(PENDING)
  taskType     TaskType
  duration     Int
  provider     Provider           @relation(fields: [providerId], references: [id])
  providerId   String
  providerType ProviderType       @default(OTHER)
  createdBy    Admin?              @relation("TaskTemplateCreatedBy", fields: [createdById], references: [id])
  createdById  String?
  updatedBy    Admin?              @relation("TaskTemplateUpdatedBy", fields: [updatedById], references: [id])
  updatedById  String?
  createdAt    DateTime           @default(now())
  updatedAt    DateTime           @updatedAt
  deletedAt    DateTime?
}

model Task {
  id           String             @id @default(cuid())
  title        String
  description  String?
  status       ProgramationStatus
  taskType     TaskType
  duration     Int
  startDate    DateTime
  endDate      DateTime
  provider     Provider           @relation(fields: [providerId], references: [id])
  providerId   String
  spot         Spot               @relation(fields: [spotId], references: [id])
  spotId       String
  createdBy    Admin?              @relation("TaskCreatedBy", fields: [createdById], references: [id])
  createdById  String?
  updatedBy    Admin?              @relation("TaskUpdatedBy", fields: [updatedById], references: [id])
  updatedById  String?
  createdAt    DateTime           @default(now())
  updatedAt    DateTime           @updatedAt
  deletedAt    DateTime?
  TaskComment  TaskComment[]
  TaskHistory  TaskHistory[]
  TaskAttachment TaskAttachment[]
}

model TaskComment {
  id        Int     @id @default(autoincrement())
  comment   String
  task      Task    @relation(fields: [taskId], references: [id])
  taskId    String
  author    User  @relation(fields: [authorId], references: [id])
  authorId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model TaskHistory {
  id        Int       @id @default(autoincrement())
  task      Task      @relation(fields: [taskId], references: [id])
  taskId    String
  status    ProgramationStatus
  changeDate DateTime @default(now())
  changedBy User  @relation(fields: [changedById], references: [id])
  changedById String
}

model TaskAttachment {
  id        Int       @id @default(autoincrement())
  url       String
  task      Task      @relation(fields: [taskId], references: [id])
  taskId    String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model BuildingCluster {
  id           String             @id @default(cuid())
  latitude     Decimal
  longitude    Decimal
  city         String
  country      String
  buildings    Building[]
  description  String?
  enterprise   Enterprise         @relation(fields: [enterpriseId], references: [id])
  enterpriseId String
  createdBy    Admin?              @relation("BuildingClusterCreatedBy", fields: [createdById], references: [id])
  createdById  String?
  updatedBy    Admin?              @relation("BuildingClusterUpdatedBy", fields: [updatedById], references: [id])
  updatedById  String?
  ClusterStatistics ClusterStatistics[]
  createdAt    DateTime           @default(now())
  updatedAt    DateTime           @updatedAt
  deletedAt    DateTime?
}

model Building {
  id           String             @id @default(cuid())
  latitude     Decimal
  longitude    Decimal
  city         String
  country      String
  spots        Spot[]
  buildingStats BuildingStatistics[]
  description  String?
  buildingCluster BuildingCluster? @relation(fields: [buildingClusterId], references: [id])
  buildingClusterId String?
  enterprise   Enterprise         @relation(fields: [enterpriseId], references: [id])
  enterpriseId String
  createdBy    Admin?              @relation("BuildingCreatedBy", fields: [createdById], references: [id])
  createdById  String?
  updatedBy    Admin?              @relation("BuildingUpdatedBy", fields: [updatedById], references: [id])
  updatedById  String?
  createdAt    DateTime           @default(now())
  updatedAt    DateTime           @updatedAt
  deletedAt    DateTime?
}

model Spot {
  id           String             @id @default(cuid())
  latitude     Decimal
  longitude    Decimal
  city         String
  country      String
  building     Building?          @relation(fields: [buildingId], references: [id])
  buildingId   String?
  description  String?
  enterprise   Enterprise         @relation(fields: [enterpriseId], references: [id])
  enterpriseId String
  tasks        Task[]
  qrCodes      QRCode[]
  nfcTags      NFCTag[]
  rfids        RFIDTag[]
  beacons      Beacon[]
  geoFences    GeoFence[]
  SpotStatistics SpotStatistics[]
  createdBy    Admin?              @relation("SpotCreatedBy", fields: [createdById], references: [id])
  createdById  String?
  updatedBy    Admin?              @relation("SpotUpdatedBy", fields: [updatedById], references: [id])
  updatedById  String?
  createdAt    DateTime           @default(now())
  updatedAt    DateTime           @updatedAt
  deletedAt    DateTime?
}

model QRCode {
  id           String             @id @default(cuid())
  code         String             @unique
  color        String
  size         Int
  text         String?
  spot         Spot               @relation(fields: [spotId], references: [id])
  spotId       String
  createdBy    Admin?              @relation("QRCodeCreatedBy", fields: [createdById], references: [id])
  createdById  String?
  updatedBy    Admin?              @relation("QRCodeUpdatedBy", fields: [updatedById], references: [id])
  updatedById  String?
  createdAt    DateTime           @default(now())
  updatedAt    DateTime           @updatedAt
  deletedAt    DateTime?
}

model NFCTag {
  id           String             @id @default(cuid())
  tag          String             @unique
  color        String
  size         Int
  text         String?
  spot         Spot               @relation(fields: [spotId], references: [id])
  spotId       String
  createdBy    Admin?              @relation("NFCTagCreatedBy", fields: [createdById], references: [id])
  createdById  String?
  updatedBy    Admin?              @relation("NFCTagUpdatedBy", fields: [updatedById], references: [id])
  updatedById  String?
  createdAt    DateTime           @default(now())
  updatedAt    DateTime           @updatedAt
  deletedAt    DateTime?
}

model RFIDTag {
  id           String             @id @default(cuid())
  tag          String             @unique
  color        String
  size         Int
  text         String?
  spot         Spot               @relation(fields: [spotId], references: [id])
  spotId       String
  createdBy    Admin?              @relation("RFIDTagCreatedBy", fields: [createdById], references: [id])
  createdById  String?
  updatedBy    Admin?              @relation("RFIDTagUpdatedBy", fields: [updatedById], references: [id])
  updatedById  String?
  createdAt    DateTime           @default(now())
  updatedAt    DateTime           @updatedAt
  deletedAt    DateTime?
}

model Beacon {
  id           String             @id @default(cuid())
  uuid         String             @unique
  major        Int
  minor        Int
  color        String
  spot         Spot               @relation(fields: [spotId], references: [id])
  spotId       String
  createdBy    Admin?              @relation("BeaconCreatedBy", fields: [createdById], references: [id])
  createdById  String?
  updatedBy    Admin?              @relation("BeaconUpdatedBy", fields: [updatedById], references: [id])
  updatedById  String?
  createdAt    DateTime           @default(now())
  updatedAt    DateTime           @updatedAt
  deletedAt    DateTime?
}

model GeoFence {
  id           String             @id @default(cuid())
  latitude     Decimal
  longitude    Decimal
  radius       Int
  spot         Spot               @relation(fields: [spotId], references: [id])
  spotId       String
  createdBy    Admin?              @relation("GeoFenceCreatedBy", fields: [createdById], references: [id])
  createdById  String?
  updatedBy    Admin?              @relation("GeoFenceUpdatedBy", fields: [updatedById], references: [id])
  updatedById  String?
  createdAt    DateTime           @default(now())
  updatedAt    DateTime           @updatedAt
  deletedAt    DateTime?
}

model Report {
  id           String             @id @default(cuid())
  title        String
  content      String
  generatedAt  DateTime           @default(now())
  enterprise   Enterprise         @relation(fields: [enterpriseId], references: [id])
  enterpriseId String
  createdBy    Admin?              @relation("ReportCreatedBy", fields: [createdById], references: [id])
  createdById  String?
  updatedBy    Admin?              @relation("ReportUpdatedBy", fields: [updatedById], references: [id])
  updatedById  String?
  createdAt    DateTime           @default(now())
  updatedAt    DateTime           @updatedAt
  deletedAt    DateTime?
}

model TaskStatistics {
  id                    Int       @id @default(autoincrement())
  totalTasks            Int       @default(0)
  completedTasks        Int       @default(0)
  pendingTasks          Int       @default(0)
  inProgressTasks       Int       @default(0)
  cancelledTasks        Int       @default(0)
  failedTasks           Int       @default(0)
  missedTasks           Int       @default(0)
  onHoldTasks           Int       @default(0)
  averageCompletionTime Decimal   @default(0.0)
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt
  
}

model ClusterStatistics {
  id                 Int       @id @default(autoincrement())
  totalBuildings     Int       @default(0)
  totalSpots         Int       @default(0)
  totalTasks         Int       @default(0)
  activeTasks        Int       @default(0)
  completedTasks     Int       @default(0)
  buildingCluster    BuildingCluster @relation(fields: [buildingClusterId], references: [id])
  buildingClusterId  String       @unique
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
}

model ProviderStatistics {
  id                  Int       @id @default(autoincrement())
  totalTasksCompleted Int       @default(0)
  totalTasksAssigned  Int       @default(0)
  averageTaskDuration Decimal   @default(0.0)
  averageResponseTime Decimal   @default(0.0)
  totalHoursWorked    Decimal   @default(0.0)
  provider            Provider  @relation(fields: [providerId], references: [id])
  providerId          String       @unique
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt
}

model BuildingStatistics {
  id              Int       @id @default(autoincrement())
  buildingId      String       @unique
  totalSpots      Int       @default(0)
  totalTasks      Int       @default(0)
  totalProviders  Int       @default(0)
  averageOccupancyRate Decimal @default(0.0)
  building        Building  @relation(fields: [buildingId], references: [id])
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
}

model SpotStatistics {
  id             Int       @id @default(autoincrement())
  spotId         String       @unique
  totalTasks     Int       @default(0)
  completedTasks Int       @default(0)
  missedTasks    Int       @default(0)
  averageTaskDuration Decimal @default(0.0)
  utilizationRate Decimal  @default(0.0)
  spot           Spot      @relation(fields: [spotId], references: [id])
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
}

enum Role {
  SUPER_ADMIN
  ADMIN
  USER
}

enum ProgramationStatus {
  NOT_PROGRAMMED
  PENDING
  IN_PROGRESS
  COMPLETED
  CANCELLED
  MISSED
  FAILED
  ON_HOLD
}

enum TaskType {
  RECURRING
  ONE_TIME
  EMERGENCY
}

enum ProviderType {
  CLEANER
  ELECTRICIAN
  PLUMBER
  CARPENTER
  PAINTER
  GARDENER
  PEST_CONTROL
  APPLIANCE_REPAIR
  COMPUTER_REPAIR
  MOBILE_REPAIR
  HVAC
  SECURITY
  IT_SUPPORT
  OTHER
}

enum TaskTemplateStatus {
  PENDING
  APPROVED
  REJECTED
  ARCHIVED
}
